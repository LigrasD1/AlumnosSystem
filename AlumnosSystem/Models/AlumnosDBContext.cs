// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace AlumnosSystem.Models;

public partial class AlumnosDBContext : DbContext
{
    public AlumnosDBContext(DbContextOptions<AlumnosDBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Administrador> Administradors { get; set; }

    public virtual DbSet<Alumno> Alumnos { get; set; }

    public virtual DbSet<AlumnoInscriptoCarrera> AlumnoInscriptoCarreras { get; set; }

    public virtual DbSet<AlumnoInscriptoCursadum> AlumnoInscriptoCursada { get; set; }

    public virtual DbSet<Carrera> Carreras { get; set; }

    public virtual DbSet<InscripcionMesa> InscripcionMesas { get; set; }

    public virtual DbSet<Institucion> Institucions { get; set; }

    public virtual DbSet<Materium> Materia { get; set; }

    public virtual DbSet<Mesa> Mesas { get; set; }

    public virtual DbSet<Profesor> Profesors { get; set; }

    public virtual DbSet<ProfesorMaterium> ProfesorMateria { get; set; }

    public virtual DbSet<ResponsableAcademico> ResponsableAcademicos { get; set; }

    public virtual DbSet<Usuario> Usuarios { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Administrador>(entity =>
        {
            entity.HasKey(e => e.IdAdministrador);

            entity.ToTable("Administrador");

            entity.Property(e => e.IdAdministrador).HasColumnName("ID_Administrador");
            entity.Property(e => e.Apenom)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.IdUsuario).HasColumnName("ID_Usuario");

            entity.HasOne(d => d.IdUsuarioNavigation).WithMany(p => p.Administradors)
                .HasForeignKey(d => d.IdUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Administrador_Usuario");
        });

        modelBuilder.Entity<Alumno>(entity =>
        {
            entity.HasKey(e => e.IdAlumno);

            entity.ToTable("Alumno");

            entity.Property(e => e.IdAlumno).HasColumnName("ID_Alumno");
            entity.Property(e => e.Apenom)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Dni)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DNI");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IdUsuario).HasColumnName("ID_Usuario");
            entity.Property(e => e.Telefono)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.IdUsuarioNavigation).WithMany(p => p.Alumnos)
                .HasForeignKey(d => d.IdUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Alumno_Usuario");
        });

        modelBuilder.Entity<AlumnoInscriptoCarrera>(entity =>
        {
            entity.HasKey(e => e.IdAlumnoInscriptoCarerra);

            entity.ToTable("AlumnoInscriptoCarrera");

            entity.Property(e => e.IdAlumnoInscriptoCarerra).HasColumnName("ID_AlumnoInscriptoCarerra");
            entity.Property(e => e.Estado)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FechaInscripcion).HasColumnName("Fecha_inscripcion");
            entity.Property(e => e.IdAlumno).HasColumnName("ID_Alumno");
            entity.Property(e => e.IdCarrera).HasColumnName("ID_Carrera");

            entity.HasOne(d => d.IdAlumnoNavigation).WithMany(p => p.AlumnoInscriptoCarreras)
                .HasForeignKey(d => d.IdAlumno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AlumnoInscriptoCarrera_Alumno");

            entity.HasOne(d => d.IdCarreraNavigation).WithMany(p => p.AlumnoInscriptoCarreras)
                .HasForeignKey(d => d.IdCarrera)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AlumnoInscriptoCarrera_Carrera");
        });

        modelBuilder.Entity<AlumnoInscriptoCursadum>(entity =>
        {
            entity.HasKey(e => e.IdAlumnoInscriptoCursada);

            entity.Property(e => e.IdAlumnoInscriptoCursada).HasColumnName("ID_AlumnoInscriptoCursada");
            entity.Property(e => e.EstadoCursada)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Estado_Cursada");
            entity.Property(e => e.FechaInscripcionCursada).HasColumnName("Fecha_InscripcionCursada");
            entity.Property(e => e.IdAlumnoInscriptoCarerra).HasColumnName("ID_AlumnoInscriptoCarerra");
            entity.Property(e => e.IdMateria).HasColumnName("ID_Materia");
            entity.Property(e => e.NotaCursada).HasColumnName("Nota_cursada");

            entity.HasOne(d => d.IdAlumnoInscriptoCarerraNavigation).WithMany(p => p.AlumnoInscriptoCursada)
                .HasForeignKey(d => d.IdAlumnoInscriptoCarerra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AlumnoInscriptoCursada_AlumnoInscriptoCarrera");

            entity.HasOne(d => d.IdMateriaNavigation).WithMany(p => p.AlumnoInscriptoCursada)
                .HasForeignKey(d => d.IdMateria)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AlumnoInscriptoCursada_Materia");
        });

        modelBuilder.Entity<Carrera>(entity =>
        {
            entity.HasKey(e => e.IdCarrera);

            entity.ToTable("Carrera");

            entity.Property(e => e.IdCarrera).HasColumnName("ID_Carrera");
            entity.Property(e => e.Estado)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IdResponsable).HasColumnName("ID_Responsable");
            entity.Property(e => e.NombreCarrera)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Nombre_Carrera");

            entity.HasOne(d => d.IdResponsableNavigation).WithMany(p => p.Carreras)
                .HasForeignKey(d => d.IdResponsable)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Carrera_ResponsableAcademico");
        });

        modelBuilder.Entity<InscripcionMesa>(entity =>
        {
            entity.HasKey(e => e.IdInscripcionMesa);

            entity.ToTable("InscripcionMesa");

            entity.Property(e => e.IdInscripcionMesa).HasColumnName("ID_inscripcionMesa");
            entity.Property(e => e.IdAlumnoInscriptoCarerra).HasColumnName("ID_AlumnoInscriptoCarerra");
            entity.Property(e => e.IdMesa).HasColumnName("ID_Mesa");

            entity.HasOne(d => d.IdAlumnoInscriptoCarerraNavigation).WithMany(p => p.InscripcionMesas)
                .HasForeignKey(d => d.IdAlumnoInscriptoCarerra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InscripcionMesa_AlumnoInscriptoCarrera");

            entity.HasOne(d => d.IdMesaNavigation).WithMany(p => p.InscripcionMesas)
                .HasForeignKey(d => d.IdMesa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InscripcionMesa_Mesa");
        });

        modelBuilder.Entity<Institucion>(entity =>
        {
            entity.HasKey(e => e.IdInstitucion);

            entity.ToTable("Institucion");

            entity.Property(e => e.IdInstitucion).HasColumnName("ID_Institucion");
            entity.Property(e => e.Altura)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Calle)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Licalidad)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NombreInstitucion)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Nombre_Institucion");
            entity.Property(e => e.Provincia)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.RazonSocial)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Razon_Social");
        });

        modelBuilder.Entity<Materium>(entity =>
        {
            entity.HasKey(e => e.IdMateria);

            entity.Property(e => e.IdMateria).HasColumnName("ID_Materia");
            entity.Property(e => e.IdCarrera).HasColumnName("ID_Carrera");
            entity.Property(e => e.NombreMateria)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Nombre_Materia");

            entity.HasOne(d => d.IdCarreraNavigation).WithMany(p => p.Materia)
                .HasForeignKey(d => d.IdCarrera)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Materia_Carrera");
        });

        modelBuilder.Entity<Mesa>(entity =>
        {
            entity.HasKey(e => e.IdMesa);

            entity.ToTable("Mesa");

            entity.Property(e => e.IdMesa).HasColumnName("ID_Mesa");
            entity.Property(e => e.FechaMesa)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Fecha_Mesa");
            entity.Property(e => e.IdMateria).HasColumnName("ID_Materia");

            entity.HasOne(d => d.IdMateriaNavigation).WithMany(p => p.Mesas)
                .HasForeignKey(d => d.IdMateria)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Mesa_Materia");
        });

        modelBuilder.Entity<Profesor>(entity =>
        {
            entity.HasKey(e => e.IdProfesor);

            entity.ToTable("Profesor");

            entity.Property(e => e.IdProfesor).HasColumnName("ID_Profesor");
            entity.Property(e => e.ApenomProfesor)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Apenom_profesor");
            entity.Property(e => e.Dni)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DNI");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FechaIngreso).HasColumnName("Fecha_Ingreso");
            entity.Property(e => e.IdUsuario).HasColumnName("ID_Usuario");
            entity.Property(e => e.Telefono)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.IdUsuarioNavigation).WithMany(p => p.Profesors)
                .HasForeignKey(d => d.IdUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesor_Usuario");
        });

        modelBuilder.Entity<ProfesorMaterium>(entity =>
        {
            entity.HasKey(e => e.IdProfesorMateria);

            entity.Property(e => e.IdProfesorMateria).HasColumnName("ID_ProfesorMateria");
            entity.Property(e => e.IdMateria).HasColumnName("ID_Materia");
            entity.Property(e => e.IdProfesor).HasColumnName("ID_Profesor");

            entity.HasOne(d => d.IdMateriaNavigation).WithMany(p => p.ProfesorMateria)
                .HasForeignKey(d => d.IdMateria)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProfesorMateria_Materia");

            entity.HasOne(d => d.IdProfesorNavigation).WithMany(p => p.ProfesorMateria)
                .HasForeignKey(d => d.IdProfesor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProfesorMateria_Profesor");
        });

        modelBuilder.Entity<ResponsableAcademico>(entity =>
        {
            entity.HasKey(e => e.IdResponsable);

            entity.ToTable("ResponsableAcademico");

            entity.Property(e => e.IdResponsable).HasColumnName("ID_Responsable");
            entity.Property(e => e.IdInstitucion).HasColumnName("ID_Institucion");
            entity.Property(e => e.NombreResponsable)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Nombre_Responsable");

            entity.HasOne(d => d.IdInstitucionNavigation).WithMany(p => p.ResponsableAcademicos)
                .HasForeignKey(d => d.IdInstitucion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ResponsableAcademico_Institucion");
        });

        modelBuilder.Entity<Usuario>(entity =>
        {
            entity.HasKey(e => e.IdUsuario);
            entity.Property(e=>e.IdUsuario).UseIdentityColumn().ValueGeneratedOnAdd();

            entity.ToTable("Usuario");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_Usuario");
            entity.Property(e => e.Contraseña)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.NombreUsuario)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Nombre_Usuario");
            entity.Property(e => e.TipoUsuario)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Tipo_Usuario");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}